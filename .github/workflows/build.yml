# Prioritized targets:
# - Do a CI build on push without errors
# - Do a Deployment to AWS on push to the production branch
# - Test creating / editing a story ?
# - Test creating a user and seeing if the example story is set up correctly ?

# https://github.com/marketplace/actions/amplify-cli-action

name: 'Build (and test)'
on: [push]

jobs:
  build:
    name: build TerriaMap and terriajs
    runs-on: ubuntu-latest

    env:
      TERRIA_JS_DIR: ${{ github.workspace }}/packages/terriajs
      AMPLIFY_ENV: dev
      AMPLIFY_REGION: eu-central-1

    strategy:
      fail-fast: false
      matrix:
        node-version: ['14.x','16.x']

    steps:
      - name: Checkout project
        uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - name: use node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Cache yarn install
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-${{ matrix.node-version }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-yarn-

      - name: Install dependencies
        run: yarn install --prefer-offline # Prefer-offline checks the cache

      - name: Install amplify with npm
        run: npm install -g @aws-amplify/cli

      # - name: configure amplify
      #   uses: ambientlight/amplify-cli-action@0.3.0
      #   with:
      #     amplify_command: configure
      #     amplify_env: dev
      #     project_dir: packages/terriajs
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     AWS_REGION: eu-central-1

      - name: Amplify pull
        run: |
          aws_config_file_path="$(pwd)/aws_config_file_path.json"
          echo '{"accessKeyId":"'${{ secrets.AWS_ACCESS_KEY_ID }}'","secretAccessKey":"'${{ secrets.AWS_SECRET_ACCESS_KEY }}'","region":"'${{ env.AMPLIFY_REGION }}'"}' > $aws_config_file_path
          echo '{"projectPath": "'"$(pwd)"'","defaultEditor":"code","envName":"'${{ env.AMPLIFY_ENV }}'"}' > ./amplify/.config/local-env-info.json
          echo '{"'${{ env.AMPLIFY_ENV }}'":{"configLevel":"project","useProfile":false,"awsConfigFilePath":"'$aws_config_file_path'"}}' > ./amplify/.config/local-aws-info.json
          amplify env pull --yes
          amplify status
        working-directory: ${{ env.TERRIA_JS_DIR }}

      - name: Chown amplify directory
        run: |
          sudo chown -R runner:docker amplify
          ls -l amplify/.config/
        working-directory: ${{ env.TERRIA_JS_DIR }}

      - name: Checkout the exports file from the amplify environment
        run: |
          ls -al
          pwd
          cd amplify
          ls -al
          pwd
          cd ..
          amplify env checkout ${{ env.AMPLIFY_ENV }} --restore
          ls -al
        working-directory: ${{ env.TERRIA_JS_DIR }}

      - name: move aws-exports.js to the correct location
        run: mv aws-exports.js lib/aws-exports.js
        working-directory: ${{ env.TERRIA_JS_DIR }}

      - name: Build with gulp
        run: npx gulp release


